# Run via ci-bootstrap/bin/deploy.sh

provider "aws" {
    region = "eu-west-2"
}

variable "environment" {}

terraform {
  backend "s3" {
    # NB. The state bucket MUST already have been manually bootstrapped.
    # See instructions in https://github.com/ONSdigital/bpm-ci/tree/master/bootstrap
    # This only needs to be done once per environment set up
    bucket = "{{environment}}.terraform.prices.bpm.ons.digital"
    key = "bootstrap/deploy/attachment-lambda-role.tfstate"
    region = "eu-west-2"
  }
}

data "aws_caller_identity" "current" {}

resource "aws_iam_role" "deploy-attachment-lambda" {
  name = "prices-svc-deploy-attachment-lambda"
  assume_role_policy = data.aws_iam_policy_document.instance-assume-role-policy.json
}

resource "aws_iam_role_policy" "deploy-attachment-lambda-inline" {
  name = "DeployAttachmentLambdaPolicy"
  role = aws_iam_role.deploy-attachment-lambda.name
  policy = data.aws_iam_policy_document.bpm-deploy-attachment-lambda-policy.json
}

data "aws_iam_policy_document" "instance-assume-role-policy" {
  statement {
    sid = "AssumeDeployRole"
    actions = [
      "sts:AssumeRole"
    ]
    principals {
      type = "AWS"
      identifiers = [
        "arn:aws:iam::{{concourse_account}}:user/prices-svc-concourse"
      ]
    }
  }
}

data "aws_iam_policy_document" "bpm-deploy-attachment-lambda-policy" {
  statement {
    sid = "InlineIAMLambdaS3Policy"
    effect = "Allow"
    actions = [
                "s3:List*",
                "s3:Object*",
                "s3:Get*",
                "s3:PutObject",
                "s3:PutBucketPolicy",
                "s3:PutBucketNotification",
                "s3:DeleteObject",
                "s3:DeleteBucketPolicy",
                "s3:DeleteBucket",
                "s3:CreateJob",
                "s3:CreateBucket",
                "lambda:UpdateFunctionConfiguration",
                "lambda:UpdateFunctionCode",
                "lambda:UpdateAlias",
                "lambda:RemovePermission",
                "lambda:List*",
                "lambda:InvokeFunction",
                "lambda:InvokeAsync",
                "lambda:Get*",
                "lambda:DeleteLayerVersion",
                "lambda:DeleteFunction",
                "lambda:CreateFunction",
                "lambda:CreateAlias",
                "lambda:AddPermission",
                "iam:PutRolePolicy",
                "iam:PassRole",
                "iam:ListPolicyVersions",
                "iam:ListInstanceProfilesForRole",
                "iam:ListAttachedRolePolicies",
                "iam:GetRole",
                "iam:GetPolicyVersion",
                "iam:GetPolicy",
                "iam:DetachRolePolicy",
                "iam:DeleteRolePolicy",
                "iam:DeleteRole",
                "iam:DeletePolicy",
                "iam:CreateRole",
                "iam:CreatePolicy",
                "iam:AttachRolePolicy",
                "apigateway:*"
              ]
    resources = [
      "*"
    ]
  }
}